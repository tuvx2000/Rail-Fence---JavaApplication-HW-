/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */
public class FrmMain extends javax.swing.JFrame {
     
    private Socket socket = null;
    private PrintWriter out = null;
    private Scanner in = null;
    
    private String prepareText="";
    private int flagAdvanced = 0;
    private String[] Cipher;
    private String isReady ="no";
    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
  //      txtrs.requestFocus();

    }
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtkey = new javax.swing.JTextField();
        txtplaintext = new javax.swing.JTextField();
        btnEncrypt = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        txtrs = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCipher = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnHoanvi = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtListKey = new javax.swing.JTextField();
        txtCharacter = new javax.swing.JTextField();
        txtCharacterAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Văn Bản:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("Kết Quả:");

        txtkey.setText("6");
        txtkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtkeyActionPerformed(evt);
            }
        });

        txtplaintext.setText("CHAOCACBANHOCMONBAOMATHONGTIN");

        btnEncrypt.setText("Mã Hóa Văn Bản");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnSend.setText("Gửi Khóa và bản mật cho Server");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtrs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Khóa:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Bản mã:");

        btnHoanvi.setText("Hóa Vị Bản Mã Và Bộ Khóa");
        btnHoanvi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoanviActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel4.setText("Bộ Khóa:");

        txtListKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtListKeyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jLabel5))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtplaintext, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtkey, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel4)
                                .addGap(76, 76, 76)
                                .addComponent(txtListKey, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtCipher, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnHoanvi)
                                    .addComponent(btnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 78, Short.MAX_VALUE))
                    .addComponent(txtrs))
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(txtCharacter)
                .addGap(57, 57, 57)
                .addComponent(txtCharacterAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(328, 328, 328))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtplaintext, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHoanvi, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtkey, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtListKey, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(198, 198, 198)
                        .addComponent(jLabel3)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCipher, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCharacterAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(txtrs, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if(isReady.equals("no")){
            JOptionPane.showMessageDialog(rootPane, "You need to Encrypted Text First!");
            return;
        }
        String chuoi =  txtkey.getText()  + "#" + txtplaintext.getText()  ;
        
        String ketqua ="";
        try {
            socket = new Socket("127.0.0.1", 1234);
            out = new PrintWriter(socket.getOutputStream(),true);
            
            in = new Scanner(socket.getInputStream());
            flagAdvanced = 0;
          //  System.out.println("client Here1" + in);
            out.println(prepareText);
            
            ketqua = in.nextLine().trim();
            Scanner sc = new Scanner(ketqua);
            sc.useDelimiter("/");
            txtrs.setText(sc.next());
            txtCharacterAmount.setText(sc.next());
            txtCharacter.setText(sc.next());
            
            
            
            
            socket.close();
        } catch (Exception e) {
            System.out.println("Loi :" + e.toString());
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
            flagAdvanced = 0;
            isReady = "yes";
            System.out.println("ON ENCRYPTING...");
            
            String sendText = TaoBanMa();
            String keyList = TaoKhoa();
                     
            System.out.println("Encrypted Text: " + sendText);
            
            
            txtCipher.setText(sendText);
            prepareText = "";
            prepareText += keyList  + "#" +sendText;
            System.out.println("prepareText = " + prepareText);
            
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void txtkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtkeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtkeyActionPerformed

    private void txtListKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtListKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtListKeyActionPerformed

    private void btnHoanviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoanviActionPerformed
        if(isReady.equals("no")){
            JOptionPane.showMessageDialog(rootPane, "You need to Encrypted Text First!");
            return;
        }
        
        String[] keyList = txtListKey.getText().split(",");
        flagAdvanced = 1;

        int min = 0;
        int max = Integer.parseInt(txtkey.getText());

        
        for (int i = 0 ; i < keyList.length-1 ; i ++) {
            int num = getRandomNumber(min,max);
            
            
            String intTemp = keyList[num];//swap key
            keyList[num] = keyList[i];
            keyList[i] = intTemp;
            
            String cipherTemp = Cipher[num];//swap key
            Cipher[num] = Cipher[i];
            Cipher[i] = cipherTemp;
            
            txtCipher.setText(Arrays.toString(Cipher).replace("[", "").replace("]", "").replace(",", "").replace(" ", ""));
            
           
        }
        
        
    
        txtListKey.setText(Arrays.toString(keyList).replace("[", "").replace("]", "").replace(" ", ""));
        
        prepareText = Arrays.toString(keyList).replace("[", "").replace("]", "").replace(" ", "")  + 
                "#" +
                Arrays.toString(Cipher).replace("[", "").replace("]", "").replace(",", "").replace(" ", "");
        
        
    }//GEN-LAST:event_btnHoanviActionPerformed
    
     private void swap (String a, String b) {
        String intTemp =a;
        a = b;
        b = a;
    }
     
    private int getRandomNumber(int min, int max) {
    //    System.out.println(Math.random());
      return (int) ((Math.random() * (max - min)) + min);
    }
    
    
    private String  TaoKhoa(){
        String keyList = "";
         
        if( flagAdvanced == 0){
            for (int i = 0 ; i < Integer.parseInt(txtkey.getText()) ; i++) {
            if(i == 0)
                keyList += (i+1) ;
            else
                keyList += "," +(i+1) ;
            }
            txtListKey.setText(keyList);
            System.out.println("Generated Key!");
        }else{
            System.out.println("Already Exist a Key!" + txtListKey.getText());
            keyList = txtListKey.getText();
        }
        
        
        return keyList;
    }
    
    private String  TaoBanMa(){
        
            String plainText = txtplaintext.getText();

            int socot = Integer.parseInt(txtkey.getText());
            int sodu = plainText.length()%socot;
            int sodongcanthem = 0;
            
            if( sodu != 0){
                for (int i = 0; i < socot - sodu; i++) {
                    plainText += '@';
                }
                sodongcanthem = socot - sodu;
            }             
             
            int sodong = (plainText.length() + sodongcanthem )/socot;

            System.out.println("socot va sodong: " + socot + " / " + sodong + "\n" + "text: "+ plainText);
            System.out.println("sodu: " + sodu + " / so ky tu can them:" + (socot - sodu));

            int count = 0;
            char[][] textMetrix = new char[sodong][socot];
            
            System.out.println("PLAIN:");
             for(int i = 0 ; i < sodong ; i ++){
                for(int j = 0 ; j < socot ; j ++){
                    textMetrix[i][j] = plainText.charAt(count);
                    count++;
                    System.out.print( textMetrix[i][j] +"  " ); //+ "  "
                }
                System.out.println("");
            } //FOR CONVERT INPUT
             
            
            String sendText ="";
            Cipher = new String[socot];

            System.out.println("ON ENCRYPTING 1 ...");
            for(int i = 0 ; i < socot; i ++){
                Cipher[i]="";
                
                for(int j = 0 ; j < sodong ; j ++){
                    System.out.print(textMetrix[j][i]  ); //+ "  "
                    sendText+= textMetrix[j][i];
                    
                    Cipher[i] += textMetrix[j][i];
                }
                System.out.println("");
              //  sendText+= " ";
            }  //FOR REVIEW INPUT
            
            System.out.println("Cipher: " + Arrays.toString(Cipher));
            
            
            return sendText;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnHoanvi;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtCharacter;
    private javax.swing.JTextField txtCharacterAmount;
    private javax.swing.JTextField txtCipher;
    private javax.swing.JTextField txtListKey;
    private javax.swing.JTextField txtkey;
    private javax.swing.JTextField txtplaintext;
    private javax.swing.JTextField txtrs;
    // End of variables declaration//GEN-END:variables
}
